import { useRouter } from 'next/router'
import Layout from '../../layout'
import { FireproofCtx } from 'use-fireproof'
import asciidoctor from 'asciidoctor'
import { useEffect, useState, useContext } from 'react'
import { Database } from '@fireproof/core'

const BOOK_ID = 'chagpt-hacks'

export default function TopicPage() {
  const router = useRouter()
  const { id } = router.query
  const { database } = useContext(FireproofCtx)

  // @ts-ignore
  // const [xdoc] = useDocument({_id : id});

  const [doc, setDoc] = useState({ title: '', content: '' })

  const [html, setHtml] = useState('')

  useEffect(() => {
    async function prepareHTML(doc) {
      const asciidoctorInstance = asciidoctor()
      const htmlContent = asciidoctorInstance.convert(doc?.content || '')
      const newHTML = await replaceImagesWithData(database, htmlContent.toString())
      setHtml(newHTML)
      setDoc(doc)
    }

    const updateDoc = async () => {
      await database.ready
      // @ts-ignore
      const doc = await database.get(id).catch(() => ({ title: '', content: '' }))
      // @ts-ignore

      prepareHTML(doc)
    }
    console.log('id', id, database?.clock)

    if (id) updateDoc()
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [id])

  useEffect(() => {}, [doc])

  // console.log('dc', id, htmlContent.constructor.name)

  // console.log(srcValues);
  // const metadata = {
  //   title: doc.title,
  //   description: 'Generated by create app'
  // }

  return (
    <Layout>
      <h1 className="text-2xl">{doc.title}</h1>
      <div className="px-4 prose dark:prose-invert" dangerouslySetInnerHTML={{ __html: html }} />
    </Layout>
  )
}

async function replaceImagesWithData(database: Database, htmlContent: string) {
  const regex = /<img[^>]+src="([^">]+)"/g

  // Array to store the extracted src values
  const srcValues: string[] = []

  let match
  while ((match = regex.exec(htmlContent.toString())) !== null) {
    const name = match[1].split('/').pop()
    const got = await database.index('images').query({ key: [BOOK_ID, name] })
    // console.log('got', name, got.rows[0].doc.img)
    srcValues.push(got.rows[0].doc.img.toString())
  }
  let i = 0
  return htmlContent.replace(regex, () => `<img src="${srcValues[i++]}"`)
  // return htmlContent
}
